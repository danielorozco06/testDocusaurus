"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[9785],{9482:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=s(4848),n=s(8453);const a={title:"Jest 14.0: React Tree Snapshot Testing",author:"Christoph Nakazawa",authorURL:"http://twitter.com/cpojer",authorFBID:0x5af311d9a1c8},r=void 0,i={permalink:"/blog/2016/07/27/jest-14",editUrl:"https://github.com/jestjs/jest/tree/main/website/blog/2016-07-27-jest-14.md",source:"@site/blog/2016-07-27-jest-14.md",title:"Jest 14.0: React Tree Snapshot Testing",description:"One of Jest's philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.",date:"2016-07-27T00:00:00.000Z",formattedDate:"July 27, 2016",tags:[],readingTime:5.355,hasTruncateMarker:!0,authors:[{name:"Christoph Nakazawa",url:"http://twitter.com/cpojer"}],frontMatter:{title:"Jest 14.0: React Tree Snapshot Testing",author:"Christoph Nakazawa",authorURL:"http://twitter.com/cpojer",authorFBID:0x5af311d9a1c8},unlisted:!1,prevItem:{title:"Jest 15.0: New Defaults for Jest",permalink:"/blog/2016/09/01/jest-15"},nextItem:{title:"Jest 13.0: Flow & REPL",permalink:"/blog/2016/06/22/jest-13"}},h={authorsImageUrls:[void 0]},l=[];function c(e){const t={a:"a",p:"p",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"One of Jest's philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases."}),"\n",(0,o.jsxs)(t.p,{children:["One of the big open questions was how to write React tests efficiently. There are plenty of tools such as ",(0,o.jsx)(t.a,{href:"https://facebook.github.io/react/docs/test-utils.html",children:"ReactTestUtils"})," and ",(0,o.jsx)(t.a,{href:"https://enzymejs.github.io/enzyme/",children:"enzyme"}),". Both of these tools are great and are actively being used. However engineers frequently told us that they spend more time writing a test than the component itself. As a result many people stopped writing tests altogether which eventually led to instabilities. Engineers told us all they wanted was to make sure their components don't change unexpectedly."]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>i});var o=s(6540);const n={},a=o.createContext(n);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);